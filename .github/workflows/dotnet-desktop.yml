name: .NET Sidebar SDK

on:
  push:
    branches: [main]
    tags:
      - "v*.*.*"
  schedule:
    - cron: "* 12 * * *"
  workflow_dispatch:
    inputs:
      reason:
        description: "Trigger Comment (Optional)"
        required: false
        default: "Manual Workflow Run"

jobs:
  build:
    runs-on:
      windows-latest # For a list of available runner types, refer to
      # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: Acrolinx.Sidebar.Net.sln
      BUILD_NUMBER: ${{ github.run_number }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: mkdir download
        run: mkdir download

      - name: download sonar
        run: powershell Invoke-WebRequest -Uri "https://github.com/SonarSource/sonar-scanner-msbuild/releases/download/4.10.0.19059/sonar-scanner-msbuild-4.10.0.19059-net46.zip" -OutFile ".\download\sonarmsbuild.zip"

      - name: extract sonar
        run: powershell Expand-Archive .\download\sonarmsbuild.zip .\sonar-msbuild\

      # Install the .NET Core workload
      - name: Install .NET 5.0.x
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.x

      - name: Nuget restore
        uses: nuget/setup-nuget@v1
      - run: nuget restore $env:Solution_Name

      # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@2008f912f56e61277eefaac6d1888b750582aa16
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true

      - name: Set up JDK 11 - required by sonar
        uses: actions/setup-java@v1
        with:
          java-version: 1.11

      - name: begin sonar
        run: sonar-msbuild\SonarScanner.MSBuild.exe begin /o:"acrolinx" /k:"acrolinx_sidebar-sdk-dotnet" /d:sonar.host.url="https://sonarcloud.io"

      # Restore the application to populate the obj folder with RuntimeIdentifiers

      - name: Restore the application
        run: msbuild $env:Solution_Name /t:Restore /p:Configuration=Release

      - name: Build the application
        run: |
          $version = git describe --abbrev=0 --tags
          $version = $version.substring(1) + "." + $env:BUILD_NUMBER
          msbuild $env:Solution_Name /p:Configuration=Release /p:Version=$version

      - name: end sonar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: sonar-msbuild\SonarScanner.MSBuild.exe end

      - name: Code signing
        env:
            CERTIFICATE: ${{ secrets.CERTIFICATE }}
            CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
            BINARY: "./Acrolinx.Sidebar/bin/Release/Acrolinx.Sidebar.dll"
            SIGNTOOL: "C:/Program Files (x86)/Windows Kits/10/bin/10.0.17763.0/x86/signtool.exe"
        shell: powershell
        run : |
          $ErrorActionPreference = 'stop'
          $env:CERTIFICATE | Out-File -FilePath .\Certificate
          certutil -decode Certificate AcrolinxCertificate.pfx
          & $env:SIGNTOOL sign /f AcrolinxCertificate.pfx /p $env:CERTIFICATE_PASSWORD /tr http://timestamp.digicert.com /td sha256 /fd sha256 $env:BINARY
          del .\Certificate
          del AcrolinxCertificate.pfx

      # Update .nuspec (Nuget Specification) with version number
      - name: Patch version in nuget spec
        run:  ((Get-Content -path .\Acrolinx.Sidebar\Acrolinx.Sidebar.nuspec -Raw) -replace '\$version\$',"`$version`$") | Set-Content -Path .\Acrolinx.Sidebar\Acrolinx.Sidebar.nuspec
      
      # Creating nuget package
      - name: Create nuget package
        run: nuget pack ".\Acrolinx.Sidebar\Acrolinx.Sidebar.csproj" -properties Configuration=Release -symbols

      # Change source of nuget package to Github, to publish on Github registry
      - name: Add nuget source to github (replacement for nexus)
        run: nuget source Add -Name "GitHub" -Source "https://nuget.pkg.github.com/acrolinx/index.json" -UserName ${{ github.actor }} -Password ${{ secrets.GITHUB_TOKEN }}

      # Push package to Github registry.
      - name: Push nuget package to github
        shell: powershell
        run: |
          $NugetPackage  = Get-ChildItem .\*.nupkg -Exclude *.symbols.nupkg -name
          Write-Host "Pushing to Github registry.. NuGet package name is : " $NugetPackage
          nuget push $NugetPackage -source "GitHub" -ApiKey ${{ secrets.GITHUB_TOKEN }} 

      # Push package to Nuget.org Only for tags(v*)
      - name: Push nuget package to Nuget.org
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          $NugetPackage = Get-ChildItem .\*.nupkg -Exclude *.symbols.nupkg -name
          Write-Host "Pushing to Nuget.org. NuGet package name is : " $NugetPackage
          nuget push $NugetPackage ${{ secrets.NUGET_API_KEY }} -Source nuget.org -Timeout 600

      # Create a release on GitHub. Only for tags(v*)
      - name: Create a release in Github
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            *.nupkg
            Acrolinx.Sidebar/bin/Release/
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}    
      
      # Restore nuspec
      - name: Restore nuget spec
        run:  ((Get-Content -path .\Acrolinx.Sidebar\Acrolinx.Sidebar.nuspec -Raw) -replace ('\$version\$-'+$env:BUILD_NUMBER), "`$version`$") | Set-Content -Path .\Acrolinx.Sidebar\Acrolinx.Sidebar.nuspec

      # Archive build artifacts
      - uses: actions/upload-artifact@master
        with:
          name: build-artifact
          path: .\Acrolinx.Sidebar\bin\Release\
