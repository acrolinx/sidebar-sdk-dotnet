name: .NET Sidebar SDK

on:
  push:
    branches: [main]
    tags:
      - "v*.*.*"
  pull_request:
    branches: [main]
  schedule:
    - cron: "0 2 * * *"
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    env:
      Solution_Name: Acrolinx.Sidebar.Net.sln
      BUILD_NUMBER: ${{ github.run_number }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: mkdir download
        run: mkdir download

      - name: download sonar
        run: powershell Invoke-WebRequest -Uri "https://github.com/SonarSource/sonar-scanner-msbuild/releases/download/10.1.1.111189/sonar-scanner-10.1.1.111189-net-framework.zip" -OutFile ".\download\sonarmsbuild.zip"

      - name: extract sonar
        run: powershell Expand-Archive download\sonarmsbuild.zip sonar-msbuild\

      - name: Install .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9

      - name: Nuget restore
        uses: nuget/setup-nuget@v2

      - run: nuget restore $env:Solution_Name

      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@v2
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true

      - name: begin sonar
        env:
          SONAR_TOKEN: ${{ secrets.SONARCLOUD_TOKEN }}
        run: sonar-msbuild\SonarScanner.MSBuild.exe begin /o:"acrolinx" /k:"acrolinx_sidebar-sdk-dotnet" /d:sonar.token=$env:SONAR_TOKEN /d:sonar.host.url="https://sonarcloud.io" /d:sonar.exclusions=Acrolinx.Sidebar.Tests\testFiles /d:sonar.cs.vscoveragexml.reportsPaths=Acrolinx.Sidebar\bin\Release\testResult.xmlcoverage.xml

      - name: Restore the application
        run: msbuild $env:Solution_Name /t:Restore /p:Configuration=Release

      - name: Build the application
        run: |
          $version = git describe --abbrev=0 --tags
          $version = $version.substring(1) + "." + $env:BUILD_NUMBER
          msbuild $env:Solution_Name /p:Configuration=Release /p:Version=$version

      - name: VS Console Tests
        run: |
          $VSTest = "$(vswhere -property installationPath)\Common7\IDE\CommonExtensions\Microsoft\TestWindow\vstest.console.exe"
          & $VSTest "Acrolinx.Sidebar.Tests\bin\Release\net9.0-windows\Acrolinx.Sidebar.Tests.dll" /settings:vstests.runsettings /Enablecodecoverage /Logger:"junit;LogFileName=TestResult.xml"

      - name: end sonar
        env:
          SONAR_TOKEN: ${{ secrets.SONARCLOUD_TOKEN }}
        run: sonar-msbuild\SonarScanner.MSBuild.exe end /d:sonar.token=$env:SONAR_TOKEN

      - name: Set variables for code signing
        id: variables
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo "SM_HOST=${{ secrets.SM_HOST }}" >> "$GITHUB_ENV" 
          echo "SM_API_KEY=${{ secrets.SM_API_KEY }}" >> "$GITHUB_ENV" 
          echo "SM_CLIENT_CERT_FILE=.\Certificate_pkcs12.p12" >> "$GITHUB_ENV" 
          echo "SM_CLIENT_CERT_PASSWORD=${{ secrets.SM_CLIENT_CERT_PASSWORD }}" >> "$GITHUB_ENV" 
          echo "C:\Program Files (x86)\Windows Kits\10\App Certification Kit" >> $GITHUB_PATH 
          echo "C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.8 Tools" >> $GITHUB_PATH 
          echo "C:\Program Files\DigiCert\DigiCert One Signing Manager Tools" >> $GITHUB_PATH
        shell: bash

      - name: Setup Certificate
        if: startsWith(github.ref, 'refs/tags/')
        env:
          SM_CLIENT_CERT_FILE_B64: ${{ secrets.SM_CLIENT_CERT_FILE_B64 }}
        run: |
          $env:SM_CLIENT_CERT_FILE_B64 > input.b64
          & "C:\Windows\System32\certutil.exe" -decode input.b64 $env:SM_CLIENT_CERT_FILE
        shell: pwsh

      - name: Setup SSM KSP on windows latest
        if: startsWith(github.ref, 'refs/tags/')
        env:
          DIGICERT_KEYPAIR_ALIAS: ${{ secrets.DIGICERT_KEYPAIR_ALIAS }}
        run: |
          echo "Downloading the DigiCert Signing Manager Tools for Windows x64"
          curl -X GET  https://one.digicert.com/signingmanager/api-ui/v1/releases/smtools-windows-x64.msi/download -H "x-api-key:%SM_API_KEY%" -o smtools-windows-x64.msi 
          msiexec /i smtools-windows-x64.msi /quiet /qn
          smctl windows certsync --keypair-alias=%DIGICERT_KEYPAIR_ALIAS% > nul 2>&1
        shell: cmd

      - name: Signing using Signtool
        if: startsWith(github.ref, 'refs/tags/')
        env:
          BINARYDIR: "./Acrolinx.Sidebar/bin/Release"
          DIGICERT_CERTIFICATE_FINGERPRINT: ${{ secrets.DIGICERT_CERTIFICATE_FINGERPRINT }}
        run: |
          Write-Host "Signing the binaries using signtool.exe"
          $frameworks = @("net8.0-windows", "net9.0-windows", "net472")
          foreach ($framework in $frameworks) {
            Write-Host "Signing $env:BINARYDIR\$framework\Acrolinx.Sidebar.dll"
            & signtool.exe sign /tr http://timestamp.digicert.com /td SHA256 /fd SHA256 /sha1 $env:DIGICERT_CERTIFICATE_FINGERPRINT "$env:BINARYDIR\$framework\Acrolinx.Sidebar.dll"
            & signtool.exe verify /v /pa "$env:BINARYDIR\$framework\Acrolinx.Sidebar.dll"
          }
        shell: pwsh

      - name: Patch version number in nuget specification
        run: ((Get-Content -path Acrolinx.Sidebar\Acrolinx.Sidebar.nuspec -Raw) -replace '\$version\$',"`$version`$.$env:BUILD_NUMBER") | Set-Content -Path Acrolinx.Sidebar\Acrolinx.Sidebar.nuspec

      - name: Create nuget package
        run: |
          $version = git describe --abbrev=0 --tags
          $version = $version.substring(1) + "." + $env:BUILD_NUMBER
          dotnet pack --no-build "Acrolinx.Sidebar\Acrolinx.Sidebar.csproj" -c Release /p:Version=$version

      - name: Add nuget source to Github to publish on Github registry
        run: nuget source Add -Name "GitHub" -Source "https://nuget.pkg.github.com/acrolinx/index.json" -UserName ${{ github.actor }} -Password ${{ secrets.GITHUB_TOKEN }}

      - name: Push nuget package to Github registry
        shell: powershell
        if: ${{ (github.ref == 'refs/heads/main') || (startsWith(github.ref, 'refs/tags/')) }}
        run: |
          $NugetPackage  = Get-ChildItem Acrolinx.Sidebar\bin\Release\*.nupkg -Exclude *.symbols.nupkg -name
          Write-Host "Pushing to Github registry.. NuGet package name is : " $NugetPackage
          nuget push Acrolinx.Sidebar\bin\Release\$NugetPackage -source "GitHub" -ApiKey ${{ secrets.GITHUB_TOKEN }}

      - name: Push nuget package to Nuget.org (only for tags)
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          $NugetPackage = Get-ChildItem Acrolinx.Sidebar\bin\Release\*.nupkg -Exclude *.symbols.nupkg -name
          Write-Host "Pushing to Nuget.org. NuGet package name is : " $NugetPackage
          nuget push Acrolinx.Sidebar\bin\Release\$NugetPackage ${{ secrets.NUGET_API_KEY }} -Source nuget.org -Timeout 600

      - name: Create a release in GitHub (only for tags)
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            *.nupkg
            Acrolinx.Sidebar/bin/Release/
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Restore nuget spec
        run: ((Get-Content -path Acrolinx.Sidebar\Acrolinx.Sidebar.nuspec -Raw) -replace ('\$version\$-'+$env:BUILD_NUMBER), "`$version`$") | Set-Content -Path Acrolinx.Sidebar\Acrolinx.Sidebar.nuspec

      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: |
            Acrolinx.Sidebar\bin\Release\
            testResults\
